Senior Python Developer/Architect Senior <span class="hl">Python</span> <span class="hl">Developer</span>/Architect Senior Python Developer/Architect - Bank of America/Merrill Lynch • Masters in Computer Engineering with 10 yrs software development experience in professional environments;  • High potential skills in development/deployment of Desktop/Web applications using Python, SQL, Shell Scripting, HTML /JavaScript targeted for all three major platforms - Windows, OS X, Linux or the Cloud;  • Shell Scripting, deployment using continuous integration and automation tools like Jenkins and Ansible is a consistent theme across a majority of my projects;  • Hands-on experience with Financial/Insurance software, GUI development, version controlling, CPU/GPU architectures, profiling and debugging in a test-driven environment; coding style is "less is more";  • Proven abilities in math, problem-solving, documentation, algorithm design, and creative/analytical thinking;  • Working style is extreme passion, reasonable and accountable. Can work independently or in a team. Authorized to work in the US for any employer Work Experience Senior Python Developer/Architect Bank of America/Merrill Lynch - Jersey City, NJ July 2017 to Present I am back at BAML for the second time. This time an interesting challenge was posed at me - to automate the User Interface (UI) testing. So, I built a brand-new framework - "Talos". Talos is a UI Automation Testing framework geared towards automating several test scenarios simultaneously for either web-based or desktop apps. I built it from scratch in roughly three months. This framework saves you a ton of time - it was an instant hit at BAML.    • Created a Python UI Automation Testing framework based on an underlying Jython API 'SikuliX'  • The framework offers 1.) A full-fledged UI automation; 2.) An extremely configurable YAML based scenario builder and; 3.) The much-coveted ability to dynamically handle any UI errors/exceptions  • Integrated Google's Tesseract OCR engine with highly customizable image pre-processing techniques to read data right off the UI  • Also baked into the framework is a visual recorder that optionally records every single scenario - that can be replayed later if testers want to see what went wrong on the UI  • "Talos" works seamlessly for both web browser based or Desktop based user interfaces    Tools and Libraries:  Python, Git, iPython, virtualenv, PIL, pytesseract, Google Tesseract, FFMPEG, jnius, SikuliX Senior Python Developer/Architect American International Group - New York, NY January 2017 to June 2017 AIG was working on transitioning from SAS/Excel to Python to create a web-based platform to host commercial models created by actuaries and used by Underwriters. This short-term project began with three basic models belonging to Auto Liability, General Liability and Workers Compensation. Starting from Pandas all the way up to koala2 - many math calculations, based on Python libraries, dominated this Excel-To- Python transitional web-app.    • Developed a novel library in Python to perform Excel calculations by using Pandas in tandem with the Generalized Linear Model approach - a library called 'early-bird'  • Test driven development is seriously considered as the methodology to ensure precision (up to 10 decimal points) of model results at every step. Unit and integration tests are written in parallel to accomplish this  • Spearheaded the effort to migrate from Active State Python 2.x to open-source Python 3.x  • Used 'koala2' for evaluating Excel sheets in Python in order to cross-verify the results from the back-end service  • Xlwings library is used as well for automated Excel evaluation for integration testing; this is paired with Pandas for fixture generation  • Shell Scripting and Jenkins pipeline are used for deployment and day-to-day operations on CentOS virtual machines Senior Python Developer/Architect Tools and Libraries - New York, NY October 2015 to December 2016 Bloomberg LP has a very agile style of working. The project is called 'KYC - Know Your Customer'. Also known as 'Entity Exchange and Screening'. Everything there is proprietary - Bloomberg's version of Python, Bloomberg's version of Git, Bloomberg's version of service routing libraries etc. So, obviously the challenges were to get things working by operating within the Bloomberg ecosystem. Here are a few highlights. You will read the word 'Introduced' a lot. Might sound redundant, but it's all true ?    • There's a bunch of data matching algorithms out there, but the one I created was original and custom tailored to verify and match the entity information coming from multiple sources;  • Introduced a brand-new SQL Alchemy-based framework that integrates seamlessly into Bloomberg Application Service (BAS) layer. The framework supports both ORM and non-ORM approaches to SQL. Very robust;  • Introduced a well-defined and configurable framework for business logic and data validation on the service layer - I called it the 'Sentinel'. This was used to prevent any bad data or improper requests from entering your service layer. It was quite powerful;  • Introduced a novel way to process the service requests - it is called 'Action Processing'. It allows you to process service layer requests based on a series of actions;  • Worked with different teams on different deployment strategies for Python applications on Linux servers;  • Worked with Bloomberg custom packaging systems like BPKG and DPKG for deployable packaging of the python applications and libraries.  • Shell Scripting and Jenkins pipeline are heavily used for deployment on RHEL machines Senior Python Developer Tools and Libraries - New York, NY June 2015 to September 2015 Python, Git, BAS (Bloomberg Application Services), MySQL, sqlalchemy, Flask, Linux/Unix Shell Scripting, Jenkins    Senior Python Developer 06/2015 -09/2015  New York Times- New York, NY    At the New York Times, I worked on a short-term project to help with their big data auditing tools. They use several systems to analyze and monitor the readership of daily news content. And, the technology involved is a combination of in-house CMS and amazon web services.    • Built a very comprehensive auditing tool (in Python) to compare the results from two of their top in-house Analytical systems;  • Used Amazon S3 and Hadoop HDFS tools to create reports on file and content comparison;  • Created new ways to deploy python modules on secure file servers.  • Shell Scripting and Jenkins pipeline are used for deployment on Ubuntu machines Senior Python Developer Tools and Libraries - Brooklyn, NY September 2014 to June 2015 This project encompassed the technical infrastructure necessary for PARCC (Partnership for Assessment of Readiness for College and Careers) to provide secure, reliable, flexible, and scalable digital data storage, management, reporting, and analysis for PARCC and its member states. And my role is to build the necessary software to support all layers of the infrastructure.    • Develop the Data Warehouse components like Universal Data Loader (UDL) to support data ingestion and edmigrate - a component to migrate all data in to the database for reporting purposes  • Monitor the core Amazon Machine Images (AMIs) and deploy apps through various Dev-Ops tools on AWS  • Manage extensive inter-API communication through RabbitMQ messaging queue service  • Build test frameworks using Python-behave tool and automate them using Ansible  • Design and architect the Ad Hoc Reporting and Analytics Package Design and Configuration system, using Pyramid/Flask/Django (each library/framework has its own pros/cons, so a little bit of everything was used)  • Shell Scripting and Jenkins pipeline are used for deployment on a variety of AWS machines Senior Python Developer/Architect Tools and Libraries - Jersey City, NJ August 2012 to August 2014 This is a very large-scale enterprise-level project for developing workflows to approve/reject quant models and for reporting statistical model information within the Enterprise Risk Management system. I was involved in peer reviewing and consistently made it to Top 3 code committers list in a team of roughly 30 developers; the technical challenges revolved mostly around implementing extremely granular business requirements on Bank of America's Quartz platform. Development work comprised 75-80% and a 20-25% major involvement in architectural design.    • Worked from the inception of converting a Desktop based application to a web based application  • Designed and developed SQLAlchemy-based libraries to interact with SQL stored procedures and functions    • Responsible for the architecture of RESTful web service layer using Flask library routing mechanism  • Transitioned raw database calls to performance-oriented ORM calls  • Modeled the service layer data into separate classes as opposed to packing everything into ORM mappings  • Adhered to standards like PEP8, code decoupling, DRY principles and object-oriented design  • Code complexity and code legibility given equal importance especially given the kind of flexibility Python offers  • Agile development through unit-testing and selenium testing using SQLite and Flask's web testing framework  • Deployment is done using a Jenkins-like tool called 'Bob Monitor' Senior Python Developer Tools and Libraries - Bloomfield, CT May 2012 to August 2012 A short-term project primarily focused on developing a middle-layer for serving data to front-end Cigna mobile app. My role was mostly to fix and re-design their buggy Django layer. The code lacked clarity and separation and the previous developers tried to push everything into bloated classes.    • Django-centric agile development seated on an Amazon EC2 Red Hat and Debian servers  • Re-designed the Django service layer that talks to Oracle back-end  • Fixed a lot of issues with the ORM models to ensure data integrity for insurance products  • Shell Scripting is used for deployment on RHEL machines Python Developer Tools and Libraries - Trenton, NJ November 2011 to May 2012 The job at the State of New Jersey government offices belongs to a category, where conventional methods don't work due to heavy work place regulations. So, I re-created web experience inside a Desktop app in limited time because of the security complications with creating a web app. The desktop app was targeted to serve the Department of Homeless Management Information System (HMIS) - a division of NJHMFA; and the goal was to give State Employees the ability to manage their website and database records within the State of NJ intranet.    • Created a Desktop software suite called the "Dashboard" from scratch - it mimics Django functionality;  • Used wxPython heavily for widgets and features involved in creating a typical desktop application;  • Enforced CRUD permissions using MySQL and presented them with the beautiful wxPython widgets;  • Shell Scripting is heavily used for deployment and running many scheduling jobs on Ubuntu servers. Software Engineer/Computer Analyst-II Tools and Libraries - Princeton, NJ August 2010 to October 2011 I had to wear multiple hats for various tasks at this job. It was focused on fulfilling diverse software needs required by HHMI's Neuroscience labs at the Princeton University. Below are some Python projects, developed by me from scratch with MySQL as back-end database.    • Video Viewer Application- Cross-platform Python GUI app to quick search for a particular video residing on remote samba servers, and enable the end-user to play the video remotely by creating local samba share;  • Mass Weighing Utility- Windows Python GUI app for animal mass weighing; talks to a digital balance using RS-232 or USB. Has many features like erroneous weight checking, automated animal detection;  • Automatic Performance Reporting System- Python-based GUI system to automate parsing of thousands of database records, capture anomalous results, generate excel reports and dispatch categorical emails;  • Cluster Computing- Harnessed the processing power of over 30 multi-core computers through cluster computing on MATLAB running on Windows, OSX and Unix/Linux (Ubuntu, Fedora) platforms, also called the MATLAB Distributed Computing Server (MDCS);  • Shell Scripting is used on a consistent basis for scheduling, reporting and deployment on Ubuntu/OS X Software Developer Tools and Libraries - Denton, TX January 2008 to August 2010 Worked as a part-time software developer at the Multimedia Information Group (MIG) - Dept of CSE, UNT in collaboration with Mayo Clinic to create software for automated colonoscopy quality measurement. Maintaining a good balance of speed, accuracy and precision was the top challenge here.    • Lead software developer for 'Quality Suite Colonoscopy software' used by Mayo Clinic, Rochester; marketed by the Endometric Corporation;  • Real-Time GPU Application: 25-fold speed up; Designed developed and tested an application using C and NVIDIA CUDA which uses the power of single/multiple Tesla GPUs for real-time computer-aided colonoscopy detection methods through binary image processing techniques. Built using Microsoft Visual Studio 2008;  • Maintained Python/Django based web app which allows manipulation of experimental colonoscopy data records of several patients stored in MySQL and monitored using SVN on Ubuntu;  • First authored the following research paper - "Effective and Accelerated Informative Frame Filtering in Colonoscopy Videos using Graphic Processing Unit". BIOSIGNALS 2011 (Published). Education M.S. in Computer Engineering University of North Texas 2010 Skills Django (6 years), HTML (4 years), MySQL (4 years), Python (10+ years), SQL (3 years) Additional Information Skills  • Using Currently (Hot): Python, Git, AWS, MySQL, SQLAlchemy, RabbitMQ, Shell, Jenkins, Ansible, HTML/JS;  • Used Recently (Warm): Django/Flask, knockout.js, wxPython, Postgres, SQL Server, SVN, CVS;  • Used a while ago (Lukewarm): OpenCV, Pyramid, Mercurial, SSL, C, CUDA, Perl, Oracle;  • Developed stuff on: Windows 7, Windows XP, Linux (Ubuntu, RHEL, Fedora), OS X 10.5+, Amazon EC2;  • Played with: Quartz, Wing IDE, PyCharm, Eclipse, Visual Studio, nginx, Tornado and several other tools.