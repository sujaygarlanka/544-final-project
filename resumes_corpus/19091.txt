Python, Perl developer <span class="hl">Python</span>, Perl <span class="hl">developer</span> Python, Perl developer Brooklyn, NY Authorized to work in the US for any employer Work Experience Python, Perl developer Lazard Asset Management - New York, NY May 2017 to January 2019 Python, Perl, OpsWise, REST(Flask), Sybase ASE / IQ, PyTest, ServiceNow    Project  Lazard's data vendor, State Street, switched their backend from EDW (Enterprise Data  Warehouse) to ESP (Enterprise Server Platform). Lazard decided to transform loaded ESP data into EDW data - allowing Lazard to continue to use EDW compliant code.    Managed and adjusted load spanning multiple systems (OpsWise, Python, REST (flask), Perl)  Process / transfer data between Sybase IQ and Sybase ASE data servers  Generate reports on discrepancies    Modified load to EDW format  Tested and installed systems coded by me as well as existing systems which needed fixes (OpsWise, CVS, ServiceNow)    Monitored and adjusted large CUAT load of State Street data into Sybase ASE (OpsWise,  Python, Perl)   dist_task_secure system supports data base access using a configuration file containing rules (mapped to stored procedures and scripts) and parameters.    Streamlined system by coding "rules" which accepted tables and columns as parameters instaed of hardcoding them within script. principal Independent Development April 2016 to May 2017 Python, PyTest, JSON, JavaScript  Start-up niridium's product, niri, runs multiple Apps on multiple systems.  Scripts are coded as templates with app and command parameters separated into a run file.  Allows automation of complex tasks and easy testing and upgrades of extensive systems.  smith & nephew, Andover, Massachusetts April 17 - May 17 (remote) ServiceNow, JavaScript, AngularJS, Jelly    Development for CMDB database.  Coded business rules (maintain CI fields based on tallies of CI relationships) and ACLs (Access Control Lists) to restrict access to CMDB fields based upon CMDB field values.    Translated user spec documents into developer documents to support coded solutions JavaScript / ServiceNow developer Independent Development March 2016 to May 2017 Python, Perl developer, ServiceNow Morgan Stanley - New York, NY January 2014 to February 2016 Python, Perl, SQL(DB2), Linux, Perforce, ServiceNow  ECRequest, a ticketing system for Morgan Stanley's infrastructure, functions as a Perl-based front-end to ServiceNow (web-based ticketing system).    Coded / debugged ServiceNow scripts ( Python, JavaScript, Jelly) to implement user requests i.e. rotate the Approval queue so one user wouldn't get all approvals.    Managed upgrades, administration and Perforce version-control.    Upgrades and Administration  Coded scripts to archive excessively large tables    Monitored tickets to ensure correct processing e.g. Fixing tickets stuck in execution    Version-control (PerForce)  Integrating clusters of changed files into new releases and disting to production    Managing multiple branches - rolling back different system elements to earlier versions when bugs occur Perl developer Federal Reserve Bank of New York October 2012 to December 2013 Perl, Windows 7, Linux, Subversion . Recomended and installed DWIM Perl. Federal Reserve had a problem with delays since all new modules had to be tested and approved. DWIM Perl contains extensive frequently used modules.  . Automated and accelerated multiple procedures and processes.    Checked validity of IP addresses mapped to a hostname (nslookup, ping).    Identified increases in disk space usage by multiple accounts.    Coded system which allowed users to configure specific profiles to use when starting/stopping  WebSphere servers (Linux, PuTTY)    Installed script as Windows service - dependent upon Interscope service - to perform necessary license file switch depending on host IP address.    Numerous scripts to sift log files, (identify errors which refer to hanging threads > argument) Perl developer Pimco/Alliance - New York, NY January 2012 to September 2012 Perl (5.8, 6.0), SQL Server, . Pimco, a mutual fund company, is separating their sales-support database from that of Alliance, their parent company.    As part of this effort, they needed their own loading system.    This system employs OO Perl and is configured through SQL Server to support multiple data file formats (both metadata columns and character-delimited files) as well as Excel data files.    It also provides options for BCP loading as well as SQL inserts. Perl developer JP Morgan - Jersey City, NJ August 2011 to November 2011 Perl (5.8, 6.0), Linux (5.5), SNMP (Simple Network Management Protocol), RPM (Red Hat Package Manager)   .Group maintains a large system of scripts (Perl) which convert machine performance and capacity status messages (SNMP traps) to Peregrine tickets.    One system (Evergreen) supports automatic and manual installations of up-to-date SNMP agents on all hosts.    Upgraded the Evergreen DEV and UAT environment to match production.    This involved the removal of hard-coded URL's and adjusting for inconsistencies due to different Perl interpreters.  . Extended other systems to absorb a broader range of SNMP traps.  . Built RPM packages (Red Hat Package Manager) as needed. Converted tar files to Linux packages using RPM .spec files. Perl developer American Express - New York, NY October 2010 to June 2011 Perl, Informatica, Visual Basic, Excel . Informatica generates plans (XML) which homogenize data from disparate databases so it can be loaded into a single data warehouse. The project was to allow users to choose pre-generated Informatica plans, depending on what currency was being loaded.    Maintained and modified the Perl scripts and database (SQL Server) which supported Informatica system.  Scripts   .Translated Informatica plans into XML (module: Template)   .Checked customer data for matches based on "fuzzy logic" (modules:Text-LevenshteinXS,  Text-JaroWinkler-0.1)   .Iimplemented web scraper (CGI Perl) to compile thousands of names, sorted by nationality, from every country where American Express offices are located. Unix/Perl developer JP Morgan Chase - New York, NY June 2010 to September 2010 Perl, Linux (Red Hat), K-shell, Excel . Brought on as Perl resource for JP Morgan Chase's emergency migration of a bond pricing system (Perl, Sybase) between Linux Clusters (>200 hosts) in Whippany NJ and Carlstadt NJ.    Coded a system (Perl, ps, vmstat) to monitor performance of the bond pricing system running on the Carlstadt cluster.    System ran as a cron job, accessing each node in the Carlstadt cluster and providing a process profile (ps, vmstat) as a summary and on a host-by-host basis.    This was necessary due to the frequent improper configuration of the Carlstadt cluster which often resulted in zombie processes after a bond pricing job. Perl Developer percenters.com - New York, NY April 2007 to May 2010 Perl, PHP(5.2), MySQL(5.0), CGI, Linux, CSS, Javascript, XML, Dynamic HTML   percenters.com is a professional Q&A site with a job board   . Redesigned and extended coded site from a Jamit template. System supports complete targeted job search capability (iterative searches based on prior keywords), fully functional control panels for employers and job seekers, and resume email alerts   . Coded automated web-scraper system Perl, MySQL, XML, PHP, to load source RSS job feeds as well as to provide job feeds to web aggregators (OOdle, careerjet)   . Coded daily job update/newsletter which lists matching jobs based on skill set and allows for update of job skills   . Coded system (FTP, PHP, MySQL) which synchronizes loaded resumes and user registrations among all servers. Perl Developer Goldman Sachs - New York, NY October 2005 to January 2007 Contract    Sybase (12.5) Perl (5.8), SQL, XML, XSL Style Sheets, Solaris, DBArtisan   . Coded system - Autosys job, Perl scripts, and stored procedures - for report generation of calculated portfolio return metrics using portfolio and benchmark returns. System would substitute proxy benchmarks for dates when primary benchmark was unavailable. Eclipse was used for version control Perl Developer Morgan Stanley - Brooklyn, NY August 2003 to June 2005 Contract  Sybase ( 12.5 ), Perl (5.8), VB.NET, Visual Studio, Solaris, DBArtisan , Data Warehouse   . LoanIQ is a system of autosys jobs and Perl scripts which load data supplied by the mainframe into the WISE (Warehouse Integration Services for the Enterprise) data warehouse.    El Hombre is a system for running and monitoring jobs that load data into the warehouse. El Hombre allows standardized management and logging of data load jobs.    Re-coded LoanIQ as a system of El Hombre jobs, using Autosys jobs, Perl scripts, and stored procedures. New  LoanIQ system loads Sybase from 31 ftp'd flat files extracted from DB2 tables, allowing parallel loading, and allowing WISE TCS in India to support it.    Recoded El Hombre VB.NET interface using Visual Studio (development tool) and ADO.NET (database access objects).  . Coded a database dump management system, using Perl scripts and stored procedures as well as Sybase tables as a logging mechanism. Sybase/Perl Developer ABN AMRO - New York, NY November 2002 to August 2003 New York, New York  Infrast.com, New York, New York  Multiple short and long term projects    Sybase/Perl Developer  Sybase ( 12.5 ), Sybperl, Unix ( SunOS 5.6 ) . Provided extensive stored procedure development, both directly (report generators, inter-database discrepancy checks, testing utilities) and as a SQL resource (setting coding guidelines, coding templates, system bullit proofing).  . Provided Sybase server tuning, (table/cache binding, modifying query syntax (using SARG), index placement).  Provided and guided stored procedure development (user specs, sp design guidelines, SQL resource). Coded logical and physical database designs (ErWin). Sybase/Perl Developer J.P. Morgan, Private Banking - New York, NY April 2000 to November 2002 Contract  Sybase ( 12.5 ), Sybperl (OOP), CGI, Unix ( SunOS 5.6 ), Java 2, JDBC, XML, ErWin, DBArtisan   . Enabled management to easily check the integrity of data transfers between large (10 Gig) databases with different logical designs. Coded reconciliation report generater that identified precise inconsistencies and enabled quick correction. Generater used stored procedures and heavy SQL, ( open joins, temp tables ), to extract the source data for any given argument date, incorporate complex mappings between a large number of tables and then rotate the rows in these tables to produce a column by column comparison.  . Coded Perl (SybPerl) system using CGI.pm (Common Gateway Interface) package to interface Statement application with Sybase, making client account data web-accessible. System used Object Oriented design (inherited @ISA methods, references) as part of Statements project to provide real-time data feed.  . Enabled systems group to run complete comparison between development, test, and production servers. Coded  Perl scripts to generate full comparison between servers ( stored procedures, tables, views ), necessary so development server and production server could be brought into sync. Scripts would access Sybase system tables ( syscomments, syscolumns ) and generate DDLs for all database objects. Using Perl arrays and hashes, scripts would cycle through all database objects on both servers, recording and listing orphans, duplicates and differences. Sybase DBA ABN AMRO - New York, NY June 1998 to February 2000 Fulltime    Sybase (11.5), Replication Server 11.5 on Sun Workstations running UNIX.  . Supported 12 Gig production database, coded stored procedures and BCP scripts to support product enhancements and fixes since vendor (MicroBank) did not have the SQL expertise. Using Excell spreadsheets, provided management with regular graphs of the database size and estimates of when more space would be needed; important, because the application, Intellitracs, does not have an archiving ability. Coded stored procedures to check the business integrity and the referential integrity of the production data, among other things, listing all orphan records.  . Set up a machine as a warm standby for production server, using Replication Server. This standby database, along with the production database, was seen by the system as a single logical database. It, therefore, served as a seamless fallback in case the production machine failed. I switched between the active and standby database as necessary. Sybase Developer Sanford Bernstein - New York, NY May 1997 to June 1998 Contract    Sybase 11, Sun Workstations running UNIX   . Coded stored procedures to copy equity and fixed-income data into newly designed data schema representing portfolio management and asset allocation decisions. In order to link source data into destination structure, system would generate keys, generate implicit rows, and condense row groups, as necessary. Extended this data model by designing intermediate tables and composite keys. Also coded monitor procedures and statistics tables to generate immediate performance data and to allow large downloads to withstand server crashes. Sybase Developer Hong Kong Shanghai Bank - New York, NY March 1996 to May 1997 Contract    Sybase 11 on an HP9000 running UNIX (HP-UX 9.0)   . Coded a system which extracts transaction data from primary Sybase server, processes it, and then inserts it, as either a cumulative or historical load, into an accounting and reporting server. The system sifts the source database so as to only extract new data and then stores this new data in text files which are then condensed (pack), melded (cpio), and archived. Education M.S. in Physics The State University of New Jersey B.S. in Physics Columbia University Links http://github.com/edydon/niri.py