Lead Python Developer Lead <span class="hl">Python</span> <span class="hl">Developer</span> Lead Developer Huntington Park, CA Authorized to work in the US for any employer Work Experience Lead Python Developer CSULA - Los Angeles, CA January 2017 to May 2017 EEG Grasp Detection using ANN:  As part of in-class Kaggle competition, created an ANN (using scikit-learn) to predict different actions, based on raw EEG data, that resulted in 91% accuracy. Python Developer CSULA - Los Angeles, CA January 2017 to May 2017 Image Classifier using ConvNet:  Classified the MINIST digit dataset with a 98% accuracy using the Lasagne library to create a ConvNet. Python Developer CSULA - Los Angeles, CA January 2017 to May 2017 Face Recognition using SVM:   Trained a SVM (using scikit-learn) to recognize faces from an employee dataset with 94% accuracy. Lead Java Developer CSULA - Los Angeles, CA August 2016 to May 2017 Network Virtualization Simulator:   Developed simulator (in Java) that mimics network virtualization to test effectiveness of embedding algorithms. Java Developer CSULA - Los Angeles, CA August 2016 to December 2016 Bitfire :  Created a BitCoin payment processing system using Java, Hibernate, Spring, JavaScript, JSON, JSP, Ajax, JQuery and other technologies. Programmer | Git Manager Robosub AUV - Los Angeles, CA March 2016 to September 2016 Developed a GUI (in Python), which interfaced with an Arduino Mega microcontroller, to allow for independent control of PWM signal for 8 thrusters. Implemented remote control of AUV (in C++) 3D Game Programmer CSULA - Los Angeles, CA June 2016 to August 2016 Developed a 3D game using Python and the Panda3D game engine. Lead Java Developer | Git Manager CSULA - Los Angeles, CA January 2016 to March 2016 Rover Simulator:  Implemented a multi-threaded program (in Java) for an autonomous rover running on a simulated environment. Lead Java Developer | Git Manager CSULA - Los Angeles, CA September 2015 to December 2015 Flight Management System:   Created a flight management system using Java, JSP, Google JavaScript API, FlightStats RESTful API. Education MS in Computer Science California State University - Los Angeles, CA 2014 to 2017 BA in Classical Civilization University of California - Los Angeles, CA 2008 to 2012 Skills MapReduce (1 year), Data Science (1 year), Git (3 years), Java (3 years), Python (2 years), C++ (2 years), C (Less than 1 year), Javascript (2 years), Ruby (Less than 1 year), Haskell (Less than 1 year), Racket (Less than 1 year), Fortran (Less than 1 year), Pandas (1 year), Scikit-Learn (1 year), Numpy (1 year), HTML, CSS (3 years), MySQL (3 years), PostgresSQL (Less than 1 year), Ajax (Less than 1 year), Git (3 years), Maven (Less than 1 year), Hibernate (Less than 1 year), Bootstrap (2 years), Spring (Less than 1 year), SQL (3 years) Links https://github.com/cgaldamez14 Awards Golden Key International Honour Society 2015-02 Honor society awards membership to students in the top 10% of their class. Groups California State University Los Angeles Robosub (CSLAUV) March 2016 to October 2016 A team of various engineers working on creating a autonomous underwater vehicle. NASA Direct Stem Program Pre-trainee August 2016 to May 2017 NASA program that trains students interested in going into research. American Society of Mechanical Engineers (ASME) January 2010 to December 2011 Group at UCLA working on creating remote control robots. Focus was mostly on machining and CADing the final product. Publications Resilient Virtual Network Mapping Against Large-scale Regional Failures http://ieeexplore.ieee.org/document/7928978/?reload=true 2017-04 Network virtualization is a key tool for enabling the scalable support of a wide range of distributed applications and services, such as cloud-based services, large-scale distributed scientific computing, and content distribution, over a common physical network infrastructure. One of the challenging problems related to network virtualization is the mapping and provisioning of virtual networks (VNs) over physical network infrastructures [1]–[4], where virtual nodes and links of a given VN request need to be mapped to physical nodes and paths that can provide enough computing/switching and networking resources, respectively. When provisioning VNs over a physical network, a critical issue is that of resiliency. VN service may require the ability to continue functioning in the event of scenarios such as equipment failures, large-scale disasters, or malicious attacks. In particular, regional failures may cause a series of cascading failures and result in a huge impact and a severe economic loss, so appropriate mechanisms must be put in place to protect against such occurrences. In this paper, we aim to provide resilient VN mapping against large-scale regional failures by provisioning sufficient isolation (e.g., region-disjoint) between primary and backup VN infrastructures. Cost-Efficient Virtual Network Function Chaining over NFV-based Network Infrastructures Network Function Virtualization (NFV) is promising to help the service providers to reduce their investment cost and shorten the cycle of network service deployment and up-grade, through implementing virtual network functions (virtual nodes) on standardized commodity hardware. One of the open challenges is how to efficiently place and chain a set of virtual network functions on the physical network infrastructure to optimize the utilization of the underlying physical computing and networking resources. In this paper, we mathematically formulate the virtual network function chaining problem using Integer Linear Programming (ILP), to facilitate an optimal solution. In addition, we propose a set of heuristic algorithms to efficiently solve this problem. In particular, we propose a novel Close to Destination Chaining (CDC) algorithm, which can achieve a very low network cost close to that of the ILP results with a low computing complexity. We conduct comprehensive simulations to evaluate the performance of the proposed heuristic algorithms, and demonstrate the effectiveness of the proposed CDC algorithm.