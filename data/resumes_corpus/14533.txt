java Developer <span class="hl">java</span> <span class="hl">Developer</span> java Developer - Morgan Stanly Bayonne, NJ ? 6 years of involvement in design, development, deployment and test of client server, web based and distributed software applications by using J2SE, JEE and J2EE technologies.  ? Experience on SDLC process that includes translation of requirements into functional and technical specifications, Designing, Developing, Testing Implementation & Post Production support using development methodologies like Waterfall and Agile.  ? Experience in System Analysis, Design, Configuration, Code management and maintenance in the sectors of Banking, Finance, E-commerce, and Health.  ? Expertise in DOM manipulation using JavaScript, DOJO, jQuery.  ? Experience on spring modules like Spring IOC and Knowledge on Spring DAO, ORM and AOP.  ? Hand on experience with Restful web services, used JAX-RS to implement RESTful applications in Java.  ? Extensive experience in working with SOA architecture and web services (SOAP, WSDL, UDDI) using Apache Axis.  ? Experience with automation deployment using Terraform.  ? Hands on experience with Docker.  ? Hands on experience with Spring, Spring MVC, Struts  ? Good knowledge on Active Directory (AD) Services.  ? Worked and knowledge on protocols HTTP, HTTPS, FTP, SMTP.  ? Good knowledge on TCP/IP protocols and TCP/IP model.  ? Good knowledge on issue tracking product JIRA.  ? Experience on architectures like Model-View-Controller (MVC), Service-Oriented-Architecture (SOA).  ? Expertise in implementing various J2EE design patterns like Singleton, Session Facade, Data Access Objects (DAO), Factory, Data Transfer Object (DTO) and Business Delegate in the development of Multi-Tier Distributed Applications.  ? Developed J2EE applications by using the IDE's such as Eclipse, NetBeans and IntelliJ.  ? Experience in deploying applications using Application Servers like Web Logic, JBOSS, Oracle App Server, and web server like IBM WebSphere, Apache Tomcat.  ? Good knowledge in usage of version controls such as CVS, Git, SVN and ClearCase.  ? Extensive experience in Oracle RDBMS design and developing stored procedures, packages, triggers, cursors using SQL and PL/SQL.  ? Expertise in XML Technologies XML, XSLT, XSD and Worked on parsers like JAXB, JAXP, SAX and DOM.  ? Good knowledge in log4J implementation to persist the data into log files and experience with ant and maven for the build and deployment of applications.  ? Well versed in developing various database objects like Tables, Packages, Stored Procedures, Functions, Triggers, Indexes, Constraints, Materialized Views and others in Oracle 10g database, IBM DB2 database.  ? Extensive involvement in development and Performance tuning of SQL and PL/SQL scripts.  ? Experience on Jasper Reports, Crystal Reports and knowledge on Oracle Reports.  ? Technical expertise in the areas of Object Oriented Analysis and Design (OOAD) Using different methodologies and UML using rational rose.  ? Excellent team player with good analytical, strategic planning and interpersonal and communication skills.  ? Highly motivated, enthusiastic and self-starter. Work Experience java Developer Morgan Stanly - Chicago, IL December 2017 to Present Unified Order Entry (UOE) application is primarily responsible for handling all the trading action on orders beginning at new order creation .UOE is centralized application for different Financial products such as equities, options, fixed come and mutual funds. UOL keeps track of an orders various transition states , from order creation onwards. primarily users are financial advisors who creates orders and monitors their order statuses for making meaningful business decisions.  MTE as per FINRA regulations amendment to rule 2232(Customer Confirmations) that require member firms to disclose additional transaction-related information to retail(non-institutional) customers for trades in certain fixed income securities. Products in scope Corporate Bonds, US Agencies Bonds, Municipal Bonds, $10 Par Structured Equity. Trades from all source systems sent to BondWave (vendor solution) via Rest API to capture the Enriched trades. BondWave handles all the trade matching and calculations of PMP/CP. At the end of day, BondWave will have a batch job that generates the copybook files feed that will get sent to confirms, via MTE NDM transmission, for processing of the client disclosures.    Responsibilities:.  • Used Java 1.8 Lambda expressions and Stream API to support functional-style operations on streams of elements.  • Worked on Java functional programming concepts like Streams, Functional Interfaces, new date time API and lambda expressions.  • Used Java 1.8 Lambda expressions and Stream API to support functional-style operations on streams of elements.  • Implemented JMS Listener on MQ, Routing functionalities and invoking corresponding web service using Apache Camel.  • Core Java with Concurrent API is used extensively for parallel processing and chunk processing.  • Apache camel Kafka end point used to publish trade flow to Apache Kafka. TFM (Transaction Forensic Monitor) to track transaction details.  • Developed component to receive inbound data from different source systems in different formats (fixed length,xml) normalized to GOMS format using Apache Camel Smook Data Format.  • Developed component send formatted (Goms JSON) trade data to GOMS Rest Endpoint to capture enriched data. Response from Rest Endpoint publishes to MQ using Apache Camel  • Involved in developing several Fix message New Order single, Execution, Confirmation.  • Used Angular router and implemented module wide routing and created different forms using Angular data driven and template driven forms.  • Developed Angular Components, Services, and Filters and took part in developing unit test and integration test cases using Jasmine, Karma.  • Consumed REST services using Angular HTTP and performed various REST Http operations for data retrievals and updates.  • Implemented Cloud capabilities like Centralized Configuration, Load Balancing, Service-to-Service call using Feign, Service Registry and Discovery using Eureka in Spring Cloud.  • Used Spring Boot which is radically faster in building cloud Micro Services and develop Spring based application with very less configuration.  • Developed Micro services & APIs using Spring Cloud, Spring Security, Spring Boot, Spring Integration.  • Spring JDBC used retrieve and update ,inserting data in oracle database with use of stored procs.  • Gulp is used to build and Bower is used for managing dependencies  • JSON request/response from UI is processed using Spring Boot, Restful features with micro services Architecture and Spring Data Jpa is used to save/retrieve the data in the backend  • Oracle Coherence used to store Reference Data.  • Used Apache Maven as a build tool for building the Restful web-service    Environment Java 1.8, concurrent package, lambda expressions, streams, J2ee, web services,JMS,XML(Dom, Sax, Xpath, Stax, XSLT),IBM MQ,Kafka 2.0, Spring Boot,Apache Camel 2.2 , Spring Batch, Spring Data JPA, EHCache,Jprofiler,Angular6,Bower,Gulp,Eclipse,WebStorm,GIT/Stash(Bitbucket),Jenkins,Confluence,Jira,SourceTree , Swagger, Maven, Windows, Linux,DB2,Sql Server, Coherence. java Developer TD Ameritrade June 2016 to December 2017 Description: Institutional Trading platform (ITP) is used to capture, manage and execute trades of financial instruments like equities, mutual funds, and options for advisors on behalf of their clients. Supports Block Trading with advisory account and account level trading.  Responsibilities:    ? Build and support web applications, mobile and tablet apps that provide account management, trading, management fees, balances, cash management, portfolio rebalancing, client document services (trade-confirms, statements and tax documents) and other capabilities  ? Developed the robust scheduled billing engine to calculate the generated fees for the advisor accounts.  ? Integration with OMS system for placing new orders and canceling orders, modifying orders using Fix messages.  ? Developed Trade Execution listener, to receive Trade Executions (Aks) from OMS system and updates database.  ? Developed Allocation Engine to allocate trades to client accounts and updates Back office system with position information  ? Designed and developed multi-tier, custom build workflow-based web application.  ? Implemented an adaptor which receives trade alerts from CEP engine and sends to Tibco EMS queue for further processing by Message Bus Message Bus was built using Spring Integration to dequeue xml trade messages from Tibco EMS queue and sends to different channels for parsing, enrichment, persisting into database.  ? Core Java with Concurrent API is used extensively for parallel processing and chunk processing of trade execution data and market data and converts in to JSON and store it Mongo DB.  ? XSLT and Trax API used to convert different formats of XML to our Standard XML format and StAX API used for parsing XML messages  ? JProfiler is used to profile he application (Memory view and CPU view and Thread view are used)  ? Followed Agile/Scrum methodology that included iterative application development, weekly Sprints and stand up meetings.  ? Consumed REST services using Angular HTTP and performed various REST Http operations for data retrievals and updates.  ? Used Spring Boot which is radically faster in building cloud Micro Services and develop Spring based application with very less configuration.  ? Developed Micro services & APIs using Spring Cloud, Spring Security, Spring Boot, Spring Integration.  ? Performed REST validations and created REST exception Handlers and used Postman to test REST services.  ? Developed unit test cases using Junit, Spring to test REST microservices.  ? Involved in consuming SOAP based web services so that the business application can integrate with legacy applications and facilitates for future applications.  ? Used Java 1.8 Lambda expressions and Stream API to support functional-style operations on streams of elements.  ? Worked on Java functional programming concepts like Streams, Functional Interfaces, new date time API and lambda expressions.  ? Design and implementation of different micro services and its Docker files.  ? Created and maintained Docker images and Docker containers.  ? Configuring the Docker containers and creating Docker files for different environments.  ? Docker swam used for container orchestration  ? Amazon IAM was used to maintain the user credentials and involved in creating custom IAM policies to various groups defined within the organization  ? To send emails to users developed Java API to interact with the Amazon SQS and Amazon SNS.  ? created Docker machine in Amazon EC2 instance and created Docker containers in Docker Machine running in Amazon EC2  ? Involved in Creating cloud formation templates using AWS Cloud formation and leveraged Elastic container services to run Docker micro services in AWS.  ? Used Multi-Threading and collection framework including List, Map etc.  ? Used Apache Maven as a build tool for building the Restful web-service.    Environment:: Java 1.8, concurrent package, lambda expressions, streams, JavaScript, Servlets, JSP's, JDBC, EJB, JPA, Hibernate, JAX-B, JAX-RS, SQL, Oracle 10g, SVN, GitHub, Ant, ServiceNow, Spring Boot, Spring Batch,JMS,Tibco EMS Autosys, Eclipse, Unix, JUnit, Log4J, Anuglar 6,HTML, CSS, and Bootstrap, Docker, AWS, , Swagger, Microservices, JIRA, Jenkins java Developer Citigroup - Jersey City, NJ January 2015 to May 2016 World Link Next Gen (GPP)  Word Link Next Gen is a re-write of existing mainframe application (world Link) using J2EE. This application main purpose is to send payments across 160 countries with multi-currency capabilities. Payments can be sent in the different types of disbursement modes (Ach, Wire, Mass pay, Remote Check, Cash). The application has the capability to book the Fx deals in multiple currencies and across multiple counterparties. Also, the system calculates the corresponding settlement date with counterparty after considering weekends and holidays.  This Application divided in to three parts. UI (User interface), Payment Processing Engine (Statemachine) and Report Engine.  Payment Processing engine (Statemachine): Statemachine processes the payments from different types of files (Fixed length, XML, Swift) and MQ messages (Swift). Payments are routed to different workflow components based on routing logic. Workflows are configured in spring container and initiated by thread pool. All workflows are monitored by M-Beans. Processing Engine has following modules Transaction Initiation, Sanctions, FXEngine, Funding and Disbursement.  Responsibilities:  • XSLT and Trax API used to convert the different formats of XML to our Standard XML format.  • Used STAX (Pull parsing API) of XML for parsing the XML messages and generated model object.  • Developed generic component for reading files and writing to files using Java IO and NIO.  • Generic component for reading from IBM MQ and Writing to MQ queues.  • Jboss cached used to maintain static data (set up data) in different nodes and replicated data between the nodes.  • Hibernate associations and criteria api used for chunk processing (batch processing) , updating and inserting data in to oracle and db2 tables.  • Ehcache used for secondary cache in hibernate.  • Thread pool and blocking queues used for parallel processing.  • Apache Axis webservices client framework used to communicate to check processing service to process checks.  • Spring framework used configures workflow and dependency injection and transaction management.  • Involved in designing validation framework for validating transactions.  • Parsing swift message and generating swift messages using Wife (Open Source swift Frame work)  • Involved in design and development of report Framework using Jasper Reports.  • Involved in developing batch jobs runs in processing engine at different schedules for processing  • Ack and Nak data present in Db2 tables of Legacy system.  • Worked on migrating disbursement module to Weblogic11g container using MDB, Ejb3, parallel processing using common, static data cache using Oracle Coherence (Tangosol).  • Developed Search Payments, User Maintenance screen using GWT.    Environment: Java1.6,J2EE,Webservices,JMS Spring,Hibernate3.0, MQ, Apache CXF, Ejb XML (Dom, Sax, Xpath, Stax, XSLT), Adobe Flex3.2,FlexBuilder,Eclipse 3.4 Windows, Linux, Oracle ,Sybase, Apache CXF Weblogic 10.3,ALBPM 6.1, ILog Jrules. Junior Java Developer Byte Alpha Solutions - Hyderabad, Telangana June 2013 to November 2014 Description: Automated Quotation System has three modules divided based on the type of logins. It has a Technical Administration Module, Administration Module and User Module. The user module is basically to create projects, prospects, and quotations. There is a well-designed quotation builder and an editor to describe the quotation and to add up items to the quotation. The workflow and approval process is also inbuilt in the quotation.    Responsibilities:  ? Involved in the Analysis, Design, Implementation and Testing of Software Development Life Cycle (SDLC) of the project.  ? Assisted the analysis team in performing the feasibility analysis of the project.  ? Designed Use Case diagrams, Class diagrams and Sequence diagrams and Object Diagrams in the detailed design phase of the project using Rational Rose 4.0.  ? Developed presentation layer of the project using HTML, JSP 2.0, JSTL and JavaScript technologies.  ? Developed complete Business tier using Stateless and Stateful Session beans with EJB 2.0 standards using Web Sphere Studio Application Developer (WSAD 5.0).  ? Used various J2EE design patterns, like DTO, DAO, and Business Delegate, Service Locator, Session Facade, Singleton and Factory patterns.  ? Consumed Web Service for transferring data between different applications.  ? Used Object/Relational mapping Hibernate 3.0 framework as the persistence layer for interacting with Oracle 9i.  ? Extensively used IBM Web Sphere 5.0 while writing code and for creating Data Sources.  ? Written complex SQL queries, stored procedures, functions and triggers in PL/SQL.  ? Configured and used Log4J for logging all the debugging and error information.  ? Involved writing code for Request Processor class to extend the functionality of struts Controller.  ? Developed Ant build scripts for compiling and building the project.  ? Used IBM Web Sphere 5.0 for deploying the application.  ? Used CVS Repository for Version Control.  ? Created test plans and JUnit test cases and test suite for testing the application.  ? Participated in the production support and maintenance of the project.    Environment: J2EE, Java/JDK, JDBC, JSP, Struts 2.0, Web Services, SOAP, REST, JavaScript, CSS, JNDI, JavaBeans, XML, XSLT, Oracle 10g, TOAD Eclipse, HTML/ DHTML, Windows, JAXB, MySQL, IBM WebSphere, HTML, CSS, Spring 3.0, Hibernate 3.5.6, Maven, JUnit, Log4j, SVN, Servlets, jQuery, JSP, Education Bachelors in EDUCATION Information Technology Jawaharlal Nehru Technological University - Hyderabad, Telangana Skills Ejb, J2ee, Java, Spring, Jax, Jax-rpc, Jax-ws, Jboss, Jms, Jndi, jquery, Jsf, Jsp, Jstl, Jta, Rmi, Servlets, Struts, C++, Git Additional Information Technical Proficiency  Languages C, C++, Java, SQL and PL/SQL  Enterprise Java Java, J2EE, Swing, RMI, Sockets, JDBC, Servlets, JSP, JMS, Java Beans, JSTL, JSF, Struts, EJB, Spring, JTA, JNDI and JPA  Tools & Frameworks  Spring MVC, Spring Web Flow, Spring IOC, Spring AOP, JMS, JSF, Log4J, SOA, Jasper reports, SOAP UI, Spring Boot, Spring Batch, Spring Security, and Spring Data    Databases Oracle 8i/9i/10g/11g, Sybase, SQL Server 7.0 / 2000, DB2, MySQL and MS Access 2000  Web Development HTML, XHTML, CSS, XML, XSD, XSL/XSLT, SAX/DOM, AJAX, JSON  Scripting Language Shell Script, bash, Perl, JavaScript, jQuery, AngularJS  Web/App Servers Web Sphere, Apache Tomcat, JBoss, WebLogic  Tools  Eclipse3.0, Net Beans5.0, Clear Case, Clear Quest, CVS, SVN, Perforce, Sub Version, Dream weaver 2000, Edit plus, VISIO, JUnit, JMeter    Web Services SOAP, RESTful, UDDI, WSDL, JAX-RPC, JAX-RS JAX-WS, JAX-B, Apache Axis2, Apache CFX, JMS, MQ  Cloud Computing VPC, S3, Route53, Direct Connect, VPC, SNS, Elastic Beanstalk, SimpleDB  Version Control GIT, CVS, SVN, Rational clear case