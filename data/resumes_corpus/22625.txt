Lead Electronics Engineer and Software Developer Lead Electronics Engineer and <span class="hl">Software</span> <span class="hl">Developer</span> Lead Electronics Engineer and Software Developer Bronx, NY Over 6 years of problem-solving skills and experience were acquired while developing software, web-apps, electronics, and  exploring reverse engineering techniques. My analytical, programming, and electronics development skills were further  strengthened during the pursuit of my degree.  I enjoy learning new technologies through problem-solving; by creating applications and electronics that solve business  problems. Consequently, I was involved in many roles during the development process - programming, electronics design,  security testing, setup, config and deployment of virtual machines and docker containers. Work Experience Lead Electronics Engineer and Software Developer Sunny Group of Companies 2017 to 2019 Reverse Engineered an existing product used for the management of casino machines. Collected large quantities of data via oscillo- scope, processed and deconstructed (with Python) proprietary protocols. A wireless SoC was fabricated around the ESP8266 micro-  controller and an Embedded C++ program (originally NodeMCU's Lua for prototyping) was developed to communicate with the machine - intercepting all sensor data and events occurring within the machine, providing Live information through the web stack.    - Scaling the system for over 10000 active slot machines required solving the C10K problem by leveraging the MQTT protocol.  To handle the volume of incoming MQTT data, the web stack utilized Django + PostgreSQL + Celery + Redis. Celery enabled  multi-processing behaviour, ensuring database writes would not err. This database was also sharded by asset number allowing for improved management of data and query speeds (due to large data sets).    - Programming the devices was automated for less technical staff to aid with; A simple GUI was created with Visual C#. Due to the company's migration of Windows to Ubuntu Operating Systems, this application was quickly recreated with Python + QT.    - A publicly facing REST API (+ oauth token authorization using the Django REST framework) was implemented to allow the Asset  Management system (developed in previous year) to perform financial analysis based on meter data collected from the slot machines.    This product saves over $1,000,000 TTD/year per casino owned and provides the opportunity to compete in a new market. Software Developer Sunny Group of Companies 2016 to 2019 Using Java's Spring Boot + Spring Batch + MongoDB + RabbitMQ, a prototype was rapidly developed and tested over months of live  usage (amassing over 20,000 records) for an Asset Management system. Spring Batch allowed for non-blocking data processing (le- veraging multi-threading making the framework feel very responsive). After clearly defining the schema, the database was swapped  over to a SQL-based database, providing more responsive queries for reports. Uniquely tailored Python scripts were developed; per- forming system monitoring (through 'top', Apache logs and Error logs) from selected processes and providing live alerts (via email).  The development environments (from above) were packaged together in Docker containers allowing for easier dev ops as well as node  balancing (with multiple instances of the same web app) to aid with scaling. Code reviews were performed regularly ensuring best  practices in code quality.    Leveraging the electronics created, hundreds of working hours per month was alleviated by optimizing the dispatching of collectors.  Professional Experience - continued Remote System Monitor 2017 to 2017 As a means for remotely administrating or monitoring a PC, this was developed as many well-known monitoring tools can be  detected by anti-malware solutions. This was programmed to perform multiple tasks running on different threads and processes to perform keylogging, screen capturing, clipboard monitoring, peripheral capture and control. The captured information would  send back information to varying servers depending on which server a communication link can be created with (as different ports  or IPs may be blocked by firewall). Keylogging and screen capturing features are known to work with Debian linux distros (run as superuser), OSX and Windows making this a multi-platform monitoring tool.  Technologies involved: Python, multiprocessing with Celery, Windows and Linux System APIs FCB Account Manager 2016 to 2016 I wanted daily reports in the morning and any changes in my accounts with First Citizens Bank. I do not receive text per transaction  as I'm supposed to receive, so this service developed must cover both reporting (with charts) and 'live' updates. Every morning, charts are emailed to me that show how my accounts are progressing (evaluating how well I am saving every month). This has been  developed and running stably for over a year; where data is obtained by web-scraping.  Technologies involved: Python, BeautifulSoup, Selenium (+headless browser) Xeemit 2016 to 2016 A full-fledged trading system with a built in live chat and map interaction along with automated/timed web-scrapers for col- lecting currency exchange data was built for a client. This is intended to be used for international purposes therefore, scalability and performance was of extreme importance. The system also undergoes penetration testing (for exploits) to ensure trading  data is only known by the administrators of the system. Multiprocessing is integrated to ensure the system can not be locked  (preventing dropped transactions). Clients can also interact and be alerted via SMS. Users interact with other users through the integrated use of Google Maps to discover where to meet for trading. Xeemit 2016 to 2016 OAuth2  Side Projects - Path Loss Modeller and Graphical Comparator (2016)  Different environmental features require different path loss equations to be taken into account when beginning a design on a wireless communication system. Selecting from environmental features, and specifying known variables (with one unknown  variable), graphs are generated showing how the path loss value would vary when providing a range of values for a known  variable.  Technologies involved: Python, Sympy, Numpy, Matplotlib, C++ Xeemit 2016 to 2016 Set up email server for reticence.net for a personalized email address and potential to create business with for future development.  This is setup within the same physical server as veydh.com (but avoiding the use of @veydh.com email addresses). Software Analyst HRplus Software ltd 2015 to 2016 SQL Triggers, Procedures and Views were written to improve performance. Existing queries were also debugged to remove erroneous  data in the reporting system. Python and PowerShell scripts were written to assist in the migration of data and automation of database  backups. Proper version control was introduced (TortoiseSVN). All developers strictly adhered to an agile style of development where daily meetings were held with the Scrum master. IT tasks (Networking and Laptop hardware upgrades) were also performed. Software Developer Internship mFisheries June 2015 to August 2015 Following closely how Google Hangouts was implemented, a video conferencing system that aids in the assessment of video qual- ity (through subjective and objective means) was developed. Leveraging WebRTC to create camera streams and websockets (with  Python's Twisted framework) for handling the socket connections required (peer-to-peer connection [STUN] or server-client  [TURN]), and Django with PostgreSQL to store network metric data of the stream along with the video files (from both the sender  and receiver), an assessment processing pipeline/framework was built.    Using Visual C# and leveraging existing assessment command-line tools (such as BVQM, CVQM and FFMPEG), a GUI was built to aid in the objective comparison of the video streams (from the sender and the receiver, while controlling network conditions which  fishermen may be subject to).    Side Projects  Apartment Management Tool (2018 - present)  Apartment managing needed to be automated to reduce expenses involved with financial tracking and issue tracking. Furthermore, receipts and contracts needed to be generated in such a manner that forgery of a receipt or contract can be easily identifiable (protect-  ing data with a hashing algorithm; based on the contents). Aside from identifying fraudulent receipts, finances needed to be tracked  to easily discover which tenants are overdue on rent and how much profit is made per month and what exactly expenses were spent on  (and when). The system generates pdfs of tenant receipts and attaches and sends emails based on data-entry. The system also scrapes  utility companies to acquire bills for each month - which is necessary in the consideration of the overall profit.  Technologies involved: Django, SQLite, Datatables, Apache2, Requests + BeautifulSoup Tropical Courier Manager Socket.IO 2015 to 2015 From track.shiptropical.com, I am only alerted to which tracking number is being processed (in transit, ready to pickup etc.). I  wanted to know the actual items without having to manually open up Amazon and find items and their associated tracking num- ber. This app automates the logging into my Amazon (via a headless browser), gets all the items and their tracking numbers, and  attempts to solve a simple captcha with tesseract-ocr (successfully solved captcha ~80% of the time; frequent logins on amazon  account trigger captcha). This generates a mapping as to which items are being processed by the item's amazon link compared to just seeing a tracking number.  Technologies involved: Python, Tkinter, Selenium (PhantomJS as headless browser), BeautifulSoup, Tesseract-OCR Xeemit 2014 to 2015 2016)  Through web-scraping the DHCP client page on the router every 3 minutes (after logging into router), we can be alerted to any device  that connects to our router by email (cheapest method).  Also through the click of a button, internet access can be enabled and disabled on certain devices giving ease-of-use parental control over internet.  Technologies involved: Python, requests, BeautifulSoup, Apache2  Video Conferencing Website(2014-2015)  Using WebRTC (an integrated browser technology) which aids in interaction with webcams through the browser (obtaining video  and audio feed with a fine level of control), a video conferencing website was developed. STUN and TURN servers were hosted al- lowing for clients in conference to automate the exchange of information with each other and choose to host a P2P conference or a  Client-Server connection (TURN). Client-side video and audio stream recording as well as chat features were also integrated and were  bandwidth optimized using web sockets over long-polling. Through WebRTC, browsers also collect data on the upload and download  speeds of the connection - this was logged for research purposes for Video Quality analysis which my Final Year Project was based  on. HTTPS had to be used as WebRTC is only allowed on secure SSL connections as of recently.  A separate project was made which automated the uploading and conversion and comparison of Recorded Video Samples (comparing  the original video captured to the received video captured as a method to analyze how much losses occurred with different compres- sion techniques with known and controlled bandwidth restrictions, as WebRTC allowed the ability to restrict a streams bandwidth  capabilities. Education B.Sc. in Electrical and Computer Engineering University of the West Indies 2011 to 2015 Skills .net, Visual studio, Application development, Arduino, C#, C/c++, C++, Django, Docker, Git, Javascript, Python, Flask, Lua, Sql, Apache, Nmap, Wireshark, Java, Spring Links http://www.veydh Additional Information Technical Skills  Web Development Application Development Electronics Development  Django, Falcon, Flask, Spring Native C/C++, Java EAGLE (CAD) + PCB Design  JavaScript, JQuery, Golang, SQL Visual Studio C#, C++ (.NET) PIC, Atmel, Espressif µcontrollers  NodeJS, Socket.IO, WebRTC Python, Lua, PowerShell Assembly (x86, PIC 16 & 18)    Workflow Software  Analysis Integrated Development Env Version Control + Deployment  Wireshark, Nmap, OllyDbg MPLAB, Xilinx, Arduino Git, TortoiseSVN  CelPlanner, HackRF, Htop Visual Studio, MATLAB Docker, Apache, Nginx  Multisim, PSpice Sublime, Selenium, GNURadio VirtualEnv, Debian/RedHat OS  Oscilloscopes, Logic Analyzers IntelliJ, PyCharm VirtualBox