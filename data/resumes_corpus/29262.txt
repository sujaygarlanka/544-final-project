Software Developer Software <span class="hl">Developer</span> Tulsa, OK Software developer with a focus on Python application development.    APPLIED SKILLSET  Programming, Web Development, Machine Learning/AI, Predictive Modeling, Relational Databases    PROGRAMMING LANGUAGES  Fluent: Python (Django, 2, and 3)  Proficient: Java, HTML, CSS, SQL  Familiar: C, C#, Javascript Work Experience Software Developer Start-up 2019 to Present I created a web service for a start-up  (undisclosed/confidential identity) as a full-stack Python/HTML developer using the Django  framework. Open Source Programmer Present I created two open source projects:  bbtools contributor/co-maintainer: bbtools is a parsing engine for Arc System Works (“ASW”) games’ files. I extracted script files from memory in various Guilty Gear titles and deciphered character script functions. I also updated the old Blazblue script parser/rebuilder to the latest version of the game and added additional features. I completed the parsing and rebuilding to facilitate the modification of a character script with easy-tounderstand Python pseudocode that gets translated back into the ASW script format. The entire project was written in Python 2.7. https://github.com/dantarion/bbtools    rev2-wakeup-tool creator: rev2-wakeup-tool is a tool that uses the training mode recording/playback feature and input simulation to make the training dummy do whatever the user wants upon standing up from getting knocked down. This added industry standard for fighting games brings Guilty Gear closer to par with games like Street Fighter V, as well as accelerates the competitive community’s knowledge of the game. As of 2018, the project no longer uses a high-level, library-based hook, but rather implements a low-level assembly hook that facilitates playback. https://github.com/Labreezy/rev2-wakeup-tool Tulsa Undergraduate Research Challenge ("TURC"), Dr. Rose Gamble Mentor University of Tulsa - Tulsa, OK June 2015 to December 2018 Applying Machine Learning Techniques and Relational Databases to Real-World Data (2015): I created a two-class support vector machine (“SVM”) that predicted collaborative relationships between musicians by examining past collaborations and computed the “Bacon” number or degrees of separation between musicians with a relational database. The SVM predicted 81% positive cases correctly in a test sample. (Programs: Python, Azure ML Studio, Java, C++ ) •     Applying Machine Algorithms to Real-World Data (2016): I used Azure ML Studio to detect anomalies in network traffic. Used Structured Query Language (“SQL”) and Python; and co-wrote a research paper submitted and accepted to HICSS-50 (Title: Towards Predicting Secure Environments for Wearable Devices). (Programs: Python, Azure ML Studio, SQL) •     Truck Network Experiment Editing Frontend/CAN Heavy Vehicle Experiment Editing Frontend (2017-2018): I created a secure website that could successfully transform a Control Area Network (“CAN”) exploit into a physical attack on a truck that can be verified with visualizations and real system behavior. After ten weeks, the website became fully integrated with the truck-simulating hardware, and basic visualizations were implemented to verify that the hardware communicated correctly to the front end and outputted useful data. (Programs: Python, Django, SQLite, Javascript) The final portion of this TURC involved implementing new attacks and practical means to execute them through the web front-end, a project expected to yield a scholarly paper. I also worked with packet capture files and replaying traffic to stimulate an actual network, which involved shell scripting (bash) and Python. (Programs: Python) Tutorial Developer University of Tulsa Department of Computer Science - Tulsa, OK June 2017 to September 2017 I volunteered to create a Django tutorial in the summer of 2017 for first-semester Seniors in the University of Tulsa Computer Science degree program as a rising Senior. The tutorial simplifies and walks through the creation of a basic website. Concepts introduced: URL and URL Patterns, Views, Models, Forms, Querying Models and Generic Django Views. https://docs.google.com/document/d/1n6-xn8nhisnxN2deLVQAZWTb1Vex6GHPEldkcAj_wTw/edit Web Developer Univeristy of Tulsa - Tulsa, OK 2018 I created a website, with five other students, to assist in the transition to the practical application of computer science concepts for first-year comp sci students. I worked on the website admin page, created an SQLite backend as well as a Django REST API that communicated with the react.js frontend Education Bachelor of Science in Computer Science The University of Tulsa - Tulsa, OK December 2018 Skills Java (4 years), ASP, Javascript, MySQL, CSS, HTML 5, Git, jQuery, Python (4 years), Django (4 years), SQL (3 years) Certifications/Licenses Microsoft Certified Professional (MCP) Currently in progress with a focus on AI and Machine Learning. Publications Towards Predicting Secure Environments for Wearable Devices http://hdl.handle.net/10125/41321 2016 Wearable devices have become more common for the average consumer. As devices need to operate with low power, many devices use simplified security measures to secure the data during transmission. While Bluetooth, the primary method of communication, includes certain security measures as part of the format, they are insufficient to fully secure the connection and the data transmitted. Users must be made aware of the potential security threats to the information communicated by the wearable, as well as be empowered and engaged to protect it. In this paper, we propose a method of identifying insecure environments through crowdsourced data, allowing wearable consumers to deploy an application on their base system (e.g., a smart phone) that alerts when in the presence of a security threat. We examine two different machine learning methods for classifying the environment and interacting with the users, as well as evaluating the potential uses for both algorithms.  “Anomaly detection sensors for a Modbus-based oil and gas well-monitoring system” 2019-06 Accepted for presentation at the 2nd International Conference on Data intelligence and Security, June 2019. (Abstract: This paper describes a network sensor that has been specifically designed to operate within an existing well-monitoring infrastructure. Network traffic and flow features are extracted in real-time and compared against pre-set and moving averages to detect and report anomalies. A prototype has been tested using the Modbus protocol and network traffic covering several months of operations. In order to avoid potential impact on the production environment, scripts captured network packets that were then replayed on the IMUNES network emulator. Preliminary results have identified useful metrics for anomaly detection in a production.)